// !! This file has been generated by dnsdist-rules-generator.py, do not edit by hand!!
luaCtx.writeFunction("AllowAction", []() {
  return dnsdist::actions::getAllowAction();
});
luaCtx.writeFunction("DelayAction", [](uint32_t msec) {
  return dnsdist::actions::getDelayAction(msec);
});
luaCtx.writeFunction("DropAction", []() {
  return dnsdist::actions::getDropAction();
});
luaCtx.writeFunction("SetEDNSOptionAction", [](uint32_t code, std::string data) {
  return dnsdist::actions::getSetEDNSOptionAction(code, data);
});
luaCtx.writeFunction("LogAction", [](boost::optional<std::string> fileName, boost::optional<bool> binary, boost::optional<bool> append, boost::optional<bool> buffered, boost::optional<bool> verboseOnly, boost::optional<bool> includeTimestamp) {
  return dnsdist::actions::getLogAction(fileName ? *fileName : "", binary ? *binary : true, append ? *append : false, buffered ? *buffered : false, verboseOnly ? *verboseOnly : true, includeTimestamp ? *includeTimestamp : false);
});
luaCtx.writeFunction("LuaFFIPerThreadAction", [](std::string code) {
  return dnsdist::actions::getLuaFFIPerThreadAction(code);
});
luaCtx.writeFunction("NoneAction", []() {
  return dnsdist::actions::getNoneAction();
});
luaCtx.writeFunction("PoolAction", [](std::string poolName, boost::optional<bool> stopProcessing) {
  return dnsdist::actions::getPoolAction(poolName, stopProcessing ? *stopProcessing : true);
});
luaCtx.writeFunction("QPSAction", [](uint32_t limit) {
  return dnsdist::actions::getQPSAction(limit);
});
luaCtx.writeFunction("QPSPoolAction", [](uint32_t limit, std::string poolName, boost::optional<bool> stopProcessing) {
  return dnsdist::actions::getQPSPoolAction(limit, poolName, stopProcessing ? *stopProcessing : true);
});
luaCtx.writeFunction("SetAdditionalProxyProtocolValueAction", [](uint8_t proxyType, std::string value) {
  return dnsdist::actions::getSetAdditionalProxyProtocolValueAction(proxyType, value);
});
luaCtx.writeFunction("SetDisableECSAction", []() {
  return dnsdist::actions::getSetDisableECSAction();
});
luaCtx.writeFunction("SetDisableValidationAction", []() {
  return dnsdist::actions::getSetDisableValidationAction();
});
luaCtx.writeFunction("SetECSOverrideAction", [](bool overrideExisting) {
  return dnsdist::actions::getSetECSOverrideAction(overrideExisting);
});
luaCtx.writeFunction("SetECSPrefixLengthAction", [](uint16_t ipv4, uint16_t ipv6) {
  return dnsdist::actions::getSetECSPrefixLengthAction(ipv4, ipv6);
});
luaCtx.writeFunction("SetExtendedDNSErrorAction", [](uint16_t infoCode, boost::optional<std::string> extraText) {
  return dnsdist::actions::getSetExtendedDNSErrorAction(infoCode, extraText ? *extraText : "");
});
luaCtx.writeFunction("SetMacAddrAction", [](uint32_t code) {
  return dnsdist::actions::getSetMacAddrAction(code);
});
luaCtx.writeFunction("SetNoRecurseAction", []() {
  return dnsdist::actions::getSetNoRecurseAction();
});
luaCtx.writeFunction("SetSkipCacheAction", []() {
  return dnsdist::actions::getSetSkipCacheAction();
});
luaCtx.writeFunction("SetTagAction", [](std::string tag, std::string value) {
  return dnsdist::actions::getSetTagAction(tag, value);
});
luaCtx.writeFunction("SetTempFailureCacheTTLAction", [](uint32_t maxTTL) {
  return dnsdist::actions::getSetTempFailureCacheTTLAction(maxTTL);
});
luaCtx.writeFunction("SNMPTrapAction", [](boost::optional<std::string> reason) {
  return dnsdist::actions::getSNMPTrapAction(reason ? *reason : "");
});
luaCtx.writeFunction("TCAction", []() {
  return dnsdist::actions::getTCAction();
});
