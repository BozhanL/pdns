// !! This file has been generated by dnsdist-rules-generator.py, do not edit by hand!!
std::shared_ptr<DNSAction> getAllowAction()
{
  return std::shared_ptr<DNSAction>(new AllowAction());
}
std::shared_ptr<DNSAction> getDelayAction(uint32_t msec)
{
  return std::shared_ptr<DNSAction>(new DelayAction(msec));
}
std::shared_ptr<DNSAction> getDropAction()
{
  return std::shared_ptr<DNSAction>(new DropAction());
}
std::shared_ptr<DNSAction> getSetEDNSOptionAction(uint32_t code, const std::string& data)
{
  return std::shared_ptr<DNSAction>(new SetEDNSOptionAction(code, data));
}
std::shared_ptr<DNSAction> getLogAction(const std::string& fileName, bool binary, bool append, bool buffered, bool verboseOnly, bool includeTimestamp)
{
  return std::shared_ptr<DNSAction>(new LogAction(fileName, binary, append, buffered, verboseOnly, includeTimestamp));
}
std::shared_ptr<DNSAction> getLuaAction(dnsdist::actions::LuaActionFunction function)
{
  return std::shared_ptr<DNSAction>(new LuaAction(function));
}
std::shared_ptr<DNSAction> getLuaFFIAction(dnsdist::actions::LuaActionFFIFunction function)
{
  return std::shared_ptr<DNSAction>(new LuaFFIAction(function));
}
std::shared_ptr<DNSAction> getLuaFFIPerThreadAction(const std::string& code)
{
  return std::shared_ptr<DNSAction>(new LuaFFIPerThreadAction(code));
}
std::shared_ptr<DNSAction> getNoneAction()
{
  return std::shared_ptr<DNSAction>(new NoneAction());
}
std::shared_ptr<DNSAction> getPoolAction(const std::string& poolName, bool stopProcessing)
{
  return std::shared_ptr<DNSAction>(new PoolAction(poolName, stopProcessing));
}
std::shared_ptr<DNSAction> getQPSAction(uint32_t limit)
{
  return std::shared_ptr<DNSAction>(new QPSAction(limit));
}
std::shared_ptr<DNSAction> getQPSPoolAction(uint32_t limit, const std::string& poolName, bool stopProcessing)
{
  return std::shared_ptr<DNSAction>(new QPSPoolAction(limit, poolName, stopProcessing));
}
std::shared_ptr<DNSAction> getSetAdditionalProxyProtocolValueAction(uint8_t proxyType, const std::string& value)
{
  return std::shared_ptr<DNSAction>(new SetAdditionalProxyProtocolValueAction(proxyType, value));
}
std::shared_ptr<DNSAction> getSetDisableECSAction()
{
  return std::shared_ptr<DNSAction>(new SetDisableECSAction());
}
std::shared_ptr<DNSAction> getSetDisableValidationAction()
{
  return std::shared_ptr<DNSAction>(new SetDisableValidationAction());
}
std::shared_ptr<DNSAction> getSetECSOverrideAction(bool overrideExisting)
{
  return std::shared_ptr<DNSAction>(new SetECSOverrideAction(overrideExisting));
}
std::shared_ptr<DNSAction> getSetECSPrefixLengthAction(uint16_t ipv4, uint16_t ipv6)
{
  return std::shared_ptr<DNSAction>(new SetECSPrefixLengthAction(ipv4, ipv6));
}
std::shared_ptr<DNSAction> getSetExtendedDNSErrorAction(uint16_t infoCode, const std::string& extraText)
{
  return std::shared_ptr<DNSAction>(new SetExtendedDNSErrorAction(infoCode, extraText));
}
std::shared_ptr<DNSAction> getSetMacAddrAction(uint32_t code)
{
  return std::shared_ptr<DNSAction>(new SetMacAddrAction(code));
}
std::shared_ptr<DNSAction> getSetNoRecurseAction()
{
  return std::shared_ptr<DNSAction>(new SetNoRecurseAction());
}
std::shared_ptr<DNSAction> getSetSkipCacheAction()
{
  return std::shared_ptr<DNSAction>(new SetSkipCacheAction());
}
std::shared_ptr<DNSAction> getSetTagAction(const std::string& tag, const std::string& value)
{
  return std::shared_ptr<DNSAction>(new SetTagAction(tag, value));
}
std::shared_ptr<DNSAction> getSetTempFailureCacheTTLAction(uint32_t maxTTL)
{
  return std::shared_ptr<DNSAction>(new SetTempFailureCacheTTLAction(maxTTL));
}
std::shared_ptr<DNSAction> getSNMPTrapAction(const std::string& reason)
{
  return std::shared_ptr<DNSAction>(new SNMPTrapAction(reason));
}
std::shared_ptr<DNSAction> getTCAction()
{
  return std::shared_ptr<DNSAction>(new TCAction());
}
